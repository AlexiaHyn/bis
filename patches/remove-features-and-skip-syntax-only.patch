From d8044585acb72e796bfcd82787025868dc9b4eb2 Mon Sep 17 00:00:00 2001
From: Snorlax <zhangxinzheng@bilibili.com>
Date: Thu, 5 Jun 2025 23:21:46 +0800
Subject: [PATCH] remove --features and skip syntax-only

---
 refresh.template.py | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/refresh.template.py b/refresh.template.py
index 4fa232d..1538c26 100644
--- a/refresh.template.py
+++ b/refresh.template.py
@@ -596,6 +596,8 @@ def _get_files(compile_action):
 
     # First, we do the obvious thing: Filter args to those that look like source files.
     source_file_candidates = [arg for arg in compile_action.arguments if not arg.startswith('-') and arg.endswith(_get_files.c_family_source_extensions)]
+    if '-fsyntax-only' in compile_action.arguments:
+        return set(), set()
     assert source_file_candidates, f"No source files found in compile args: {compile_action.arguments}.\nPlease file an issue with this information!"
     source_file = source_file_candidates[0]
 
@@ -929,12 +931,12 @@ def _get_commands(target: str, flags: str):
                 # They are, however, technically supported on other platforms/compilers.
             # That's all well and good, but param files would prevent us from seeing compile actions before the param files had been generated by compilation.
             # Since clangd has no such length limit, we'll disable param files for our aquery run.
-            '--features=-compiler_param_file',
+            # '--features=-compiler_param_file',
             # Disable layering_check during, because it causes large-scale dependence on generated module map files that prevent header extraction before their generation
                 # For more context, see https://github.com/hedronvision/bazel-compile-commands-extractor/issues/83
                 # If https://github.com/clangd/clangd/issues/123 is resolved and we're not doing header extraction, we could try removing this, checking that there aren't erroneous red squigglies squigglies before the module maps are generated.
                 # If Bazel starts supporting modules (https://github.com/bazelbuild/bazel/issues/4005), we'll probably need to make changes that subsume this.
-            '--features=-layering_check',
+            # '--features=-layering_check',
         ] + additional_flags
 
         aquery_process = subprocess.run(
-- 
2.39.5 (Apple Git-154)

